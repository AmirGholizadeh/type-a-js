!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"===i(e)&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(t){return e[t]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s="./src/ts/TypeJS.ts")}({"./node_modules/css-loader/dist/cjs.js!./src/css/main.css":
/*!****************************************************************!*\
    !*** ./node_modules/css-loader/dist/cjs.js!./src/css/main.css ***!
    \****************************************************************/
/*! no static exports found */
function(e,t,n){(t=n(
/*! ../../node_modules/css-loader/dist/runtime/api.js */
"./node_modules/css-loader/dist/runtime/api.js")(!1)).push([e.i,"@keyframes cursorAnimation {\n  0% {\n    opacity: 0; }\n  49% {\n    opacity: 0; }\n  50% {\n    opacity: 1; } }\n",""]),e.exports=t},"./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
    !*** ./node_modules/css-loader/dist/runtime/api.js ***!
    \*****************************************************/
/*! no static exports found */
function(e,t,n){"use strict";function i(e,t){var n,i,o,r=e[1]||"",c=e[3];if(!c)return r;if(t&&"function"==typeof btoa){var s=(n=c,i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(o," */")),d=c.sources.map((function(e){return"/*# sourceURL=".concat(c.sourceRoot||"").concat(e," */")}));return[r].concat(d).concat([s]).join("\n")}return[r].join("\n")}e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=i(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(o[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);i&&o[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
    !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
    \****************************************************************************/
/*! no static exports found */
function(e,t,n){"use strict";function i(e){for(var t=-1,n=0;n<g.length;n++)if(g[n].identifier===e){t=n;break}return t}function o(e,t){for(var n={},o=[],r=0;r<e.length;r++){var c=e[r],s=t.base?c[0]+t.base:c[0],a=n[s]||0,u="".concat(s," ").concat(a);n[s]=a+1;var f=i(u),l={css:c[1],media:c[2],sourceMap:c[3]};-1===f?g.push({identifier:u,updater:d(l,t),references:1}):(g[f].references++,g[f].updater(l)),o.push(u)}return o}function r(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=l(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}function c(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var r=document.createTextNode(o),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(r,c[t]):e.appendChild(r)}}function s(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}function d(e,t){var n,i,o;if(t.singleton){var d=h++;n=m||(m=r(t)),i=c.bind(null,n,d,!1),o=c.bind(null,n,d,!0)}else n=r(t),i=s.bind(null,n,t),o=function(){!function(e){null!==e.parentNode&&e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}var a,u,f=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},l=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),g=[],p=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")}),m=null,h=0;e.exports=function(e,t){!(t=t||{}).singleton&&"boolean"!=typeof t.singleton&&(t.singleton=f());var n=o(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var c=i(n[r]);g[c].references--}for(var s=o(e,t),d=0;d<n.length;d++){var a=i(n[d]);0===g[a].references&&(g[a].updater(),g.splice(a,1))}n=s}}}},"./src/css/main.css":
/*!**************************!*\
    !*** ./src/css/main.css ***!
    \**************************/
/*! no static exports found */
function(e,t,n){var i=n(
/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */
"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=n(
/*! !../../node_modules/css-loader/dist/cjs.js!./main.css */
"./node_modules/css-loader/dist/cjs.js!./src/css/main.css");"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},c=(i(o,r),o.locals?o.locals:{});e.exports=c},"./src/ts/TypeJS.ts":
/*!**************************!*\
    !*** ./src/ts/TypeJS.ts ***!
    \**************************/
/*! no static exports found */
function(e,t,n){"use strict";t.__esModule=!0;var i=n(
/*! ./classes/UIController */
"./src/ts/classes/UIController.ts"),o=n(
/*! ./functions/random */
"./src/ts/functions/random.ts");n(
/*! ./../css/main.css */
"./src/css/main.css");var r=function(){function e(e,t){this.startPermission=!0,this.addPermissionF=!1,this.deletePermission=!1,this.addPermissionIn=!1,this.config=t,this.parentId=e,this.addTextArr=this.config.add&&this.config.add.text.split(""),this.config.init.delay=this.config.init.delay?this.config.init.delay:1,this.config.init.delayBetween=this.config.init.delayBetween?this.config.init.delayBetween:50,this.config.cursorSpeed=this.config.cursorSpeed?this.config.cursorSpeed:50,this.config.clearDelay=this.config.clearDelay?this.config.clearDelay:1,this.config.delete&&(this.config.delete.delay=this.config.delete.delay?this.config.delete.delay:this.config.init.delay,this.config.delete.delayBetween=this.config.delete.delayBetween?this.config.delete.delayBetween:this.config.init.delayBetween),this.config.add&&(this.config.add.delay=this.config.add.delay?this.config.add.delay:this.config.init.delay,this.config.add.delayBetween=this.config.add.delayBetween?this.config.add.delayBetween:this.config.init.delayBetween),this.uiConfig={parentId:this.parentId,cursorId:""+o.default(0,9999999999999),containerId:""+o.default(0,9999999999999),textContainerId:""+o.default(0,9999999999999)},this.ui=new i.default(this.uiConfig)}return e.prototype.init=function(){this.typeIt()},e.prototype.handle=function(){var e=this;this.ui.createContainer(),this.ui.createCursor(this.config.cursorSpeed),this.initTextArr=this.config.init.text.split(""),window.setTimeout((function(){e.ui.createContainer(),e.ui.createCursor(e.config.cursorSpeed),e.initTextArr.forEach((function(t,n){window.setTimeout((function(){e.ui.addText(t),n===e.config.init.text.length-1&&(e.config.delete?window.setTimeout((function(){for(var t=function(t){window.setTimeout((function(){e.ui.deleteText(),t===e.config.delete.count-1&&e.config.add&&(e.addPermissionF=!0)}),t*e.config.delete.delayBetween)},n=0;n<e.config.delete.count;n++)t(n)}),e.config.delete.delay):e.config.add&&(e.addPermissionF=!0),e.config.add&&window.setInterval((function(){e.addPermissionF&&(e.addPermissionF=!1,window.setTimeout((function(){e.addTextArr.forEach((function(t,n){window.setTimeout((function(){e.ui.addText(t)}),n*e.config.add.delayBetween)}))}),e.config.add.delay))}),0))}),n*e.config.init.delayBetween)}))}),this.config.init.delay)},e.prototype.handleInfinite=function(){var e=this;window.setInterval((function(){e.startPermission&&(e.initTextArr=e.config.init.text.split(""),e.startPermission=!1,e.ui.createContainer(),e.ui.createCursor(e.config.cursorSpeed),window.setTimeout((function(){e.initTextArr.forEach((function(t,n){window.setTimeout((function(){if(e.ui.addText(t),e.initTextArr.length-1===n){e.config.delete?window.setTimeout((function(){for(var t=function(t){window.setTimeout((function(){if(e.ui.deleteText(),t===e.config.delete.count-1&&e.config.add){if(!e.config.infinite.deleteInfinite){var n=e.config.init.text.split("");n.splice(n.length-e.config.delete.count,n.length),e.config.init.text=n.toString().replace(/,/g,""),e.initTextArr=e.config.init.text.split(""),e.config.delete=null}e.addPermissionIn=!0}}),e.config.delete.delayBetween*t)},n=0;n<e.config.delete.count;n++)t(n)}),e.config.delete.delay):e.config.add?(e.deletePermission=!1,e.addPermissionIn=!0):e.deletePermission=!0,e.config.add?window.setInterval((function(){!0===e.addPermissionIn&&(e.addPermissionIn=!1,window.setTimeout((function(){e.addTextArr.forEach((function(t,n){window.setTimeout((function(){e.ui.addText(t),e.addTextArr.length-1===n&&(!e.config.infinite.addInfinite&&(e.config.init.text=""+e.config.init.text+e.config.add.text,e.initTextArr=e.config.init.text.split(""),e.config.add=null),e.deletePermission=!0)}),n*e.config.add.delayBetween)}))}),e.config.add.delay))}),0):e.deletePermission=!0;var i=window.setInterval((function(){e.deletePermission&&(e.deletePermission=!1,window.setTimeout((function(){e.ui.clear(),e.startPermission=!0,window.clearInterval(i)}),e.config.clearDelay))}),0)}}),n*e.config.init.delayBetween)}))}),e.config.init.delay))}),0)},e.prototype.typeIt=function(){this.config.infinite?this.handleInfinite():this.handle()},e}();t.default=r},"./src/ts/classes/UIController.ts":
/*!****************************************!*\
    !*** ./src/ts/classes/UIController.ts ***!
    \****************************************/
/*! no static exports found */
function(e,t,n){"use strict";t.__esModule=!0;var i=function(){function e(e){this.config=e}return e.prototype.createCursor=function(e){var t=document.createElement("span");t.id=this.config.cursorId,t.textContent="|",t.setAttribute("style","animation:cursorAnimation "+e/100+"s infinite;"),document.getElementById(this.config.cursorId)&&document.getElementById(this.config.cursorId).remove(),document.getElementById(this.config.containerId).appendChild(t)},e.prototype.createTextContainer=function(){var e=document.createElement("span");e.id=this.config.textContainerId,document.getElementById(this.config.containerId).appendChild(e)},e.prototype.addText=function(e){var t=document.getElementById(this.config.textContainerId);t.textContent=""+t.textContent+e},e.prototype.deleteText=function(){document.getElementById(this.config.textContainerId).textContent=document.getElementById(this.config.textContainerId).textContent.slice(0,document.getElementById(this.config.textContainerId).textContent.length-1)},e.prototype.clear=function(){document.getElementById(this.config.cursorId)&&document.getElementById(this.config.cursorId).remove(),document.getElementById(this.config.textContainerId)&&document.getElementById(this.config.textContainerId).remove()},e.prototype.createContainer=function(){var e=document.createElement("div");e.id=this.config.containerId,"#"===this.config.parentId.charAt(0)?document.getElementById(this.config.parentId.slice(1,this.config.parentId.length)).appendChild(e):document.querySelector(this.config.parentId).appendChild(e),this.createTextContainer()},e}();t.default=i},"./src/ts/functions/random.ts":
/*!************************************!*\
    !*** ./src/ts/functions/random.ts ***!
    \************************************/
/*! no static exports found */
function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return Math.floor(Math.random()*t)+e}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,